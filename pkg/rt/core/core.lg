;
; Copyright (c) 2021 Marcin Gasperowicz <xnooga@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
; documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
; persons to whom the Software is furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
; Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
; COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
;

; let-go core library

(def defn (fn [name args & body] (list 'def name (cons 'fn (cons args body)))))
(set-macro! (var defn)) ; this is how we make macros before we can use defmacro

(defn defmacro [name args & body] (list 'do (cons 'defn (cons name (cons args body))) (list 'set-macro! (list 'var name))))
(set-macro! (var defmacro))

(defmacro comment [x] nil)

(defmacro when [condition & forms]
  (list 'if condition (cons 'do forms) nil))

(defmacro cond [& forms]
  (when forms
        (list 'if (first forms) (second forms)
              (cons 'cond (next (next forms))))))