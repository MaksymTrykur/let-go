; let-go core library

(def defn (fn [name args & body] (list 'def name (cons 'fn (cons args body)))))
(set-macro! (var defn)) ; this is how we make macros before we can use defmacro

(defn defmacro [name args & body] (list 'do (cons 'defn (cons name (cons args body))) (list 'set-macro! (list 'var name))))
(set-macro! (var defmacro))

(defmacro comment [x] nil)

(defmacro when [condition & forms]
  (list 'if condition (cons 'do forms) nil))

(defmacro cond [& forms]
  (when forms
        (list 'if (first forms) (second forms)
              (cons 'cond (next (next forms))))))