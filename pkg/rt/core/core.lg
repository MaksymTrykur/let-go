;
; Copyright (c) 2021 Marcin Gasperowicz <xnooga@gmail.com>
; SPDX-License-Identifier: MIT
;

; let-go core library

(def defn (fn [name args & body] (list 'def name (cons 'fn (cons args body)))))

(set-macro! (var defn))

; this is how we make macros before we can use defmacro

(defn defmacro [name args & body]
  (list 'do (cons 'defn (cons name (cons args body))) (list 'set-macro! (list 'var name))))

(set-macro! (var defmacro))

(defmacro comment [x] nil)

(defmacro when [condition & forms]
  (list 'if condition (cons 'do forms) nil))

(defmacro when-not [condition & forms]
  (list 'if condition nil (cons 'do forms)))

(defmacro if-not [condition & forms]
  (list 'if condition (first (next forms)) (first forms)))

(defn empty? [xs] (= 0 (count xs)))

(defn concat-list [a b]
  (if (empty? a)
    b
    (cons (first a) (concat-list (next a) b))))

(def > gt)
(def < lt)

(def >= (fn [a b] (or (= a b) (> a b))))
(def <= (fn [a b] (or (= a b) (< a b))))

(defmacro cond [& forms]
  (when (>= (count forms) 2)
        (list 'if (first forms) (second forms)
              (cons 'cond (next (next forms))))))

(defmacro condp [comparator arg & forms]
  (let [l (count forms)]
    (cond (= l 0) nil
          ;; this is an error
          (= l 1) (first forms)
          :else   (list 'if
                        (list comparator arg (first forms))
                        (second forms)
                        (cons 'condp (cons comparator (cons arg (next (next forms)))))))))

(defmacro case [arg & forms]
  (concat-list (list 'condp '= arg) forms))

(defmacro ns [n & nss]
  (let [cns     (list 'in-ns (list 'quote n))
        imports (cons 'use nss)]
    ; FIXME this is not clojure syntax at all
    (list 'do cns imports)))

; makeshift test helper
(def *test-flag* true)

(defmacro test [name & body]
  (let [bod  (cons 'do body)
        pass (list 'println "  \u001b[32mPASS\u001b[0m" name)
        fail (list 'do
                   (list 'set! 'core/*test-flag* false)
                   (list 'println "  \u001b[31mFAIL\u001b[0m" name))]
    (list 'if bod pass fail)))

(defn identity [x] x)

(defn zero? [x] (= 0 x))
(defn pos? [x] (gt x 0))
(defn neg? [x] (lt x 0))

(defn nil? [x] (= nil x))

(defmacro not= [& xs] (list 'not (cons '= xs)))

(defn inc [x] (+ x 1))
(defn dec [x] (- x 1))

;; bleh
(defn list? [x] (= (type x) (type '())))

(defmacro time [& body]
  (let [then   (gensym "time__")
        val    (gensym)
        now    (list 'core/now)
        report (list 'core/println "Elapsed:" (list '.Sub now then))]
    (list 'let (vector then now val (cons 'do body))
          report
          val)))

(defmacro -> [initial & forms]
  (if (zero? (count forms))
    initial
    (reduce
      (fn [a x]
        (if (list? x)
          (cons (first x) (cons a (next x)))
          (list x a)))
      initial
      forms)))

(defmacro ->> [initial & forms]
  (if (zero? (count forms))
    initial
    (reduce
      (fn [a x]
        (if (list? x)
          (concat-list x (list a))
          (list x a)))
      initial
      forms)))

(defn mapcat [f xs]
  (reduce (fn [a x] (concat-list a x)) '() (map f xs)))

(defn filter [f xs]
  (reduce (fn [a x] (if (f x) (cons x a) a)) '() xs))

(defn take [n coll]
  (when (and coll (> n 0))
        (cons (first coll) (take (dec n) (next coll)))))
