;
; Copyright (c) 2021 Marcin Gasperowicz <xnooga@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
; documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
; persons to whom the Software is furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
; Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
; COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
; OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
;

(test "let simple"
      (let [x 1 y 2]
        (= 3 (+ x y))))

(test "let recursive"
      (let [x 1
            y (+ x 1)
            y (+ 1 y)] ; shadow the old y
        (= 4 (+ x y))))

(test "simple closure"
      (let [f (fn [x] (fn [y] (+ x y)))] ; x comes from outer scope
        (= 3 ((f 1) 2))))

(test "nested closure"
      (let [f (fn [x] (fn [y] (fn [z] (+ x (+ y z)))))] ; x and y come from outer scopes
        (= 6 (((f 1) 2) 3))))

(test "Y combinator"
      (let [Y (fn [f] ((fn [x] (x x))
                        (fn [x]
                          (f (fn [y] ((x x) y))))))
            fac-gen (fn [func] (fn [n] (if (zero? n) 1 (* n (func (dec n))))))]
        (= 120 ((Y fac-gen) 5))))